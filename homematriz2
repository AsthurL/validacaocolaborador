<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Validação de Colaboradores</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Estilo para a barra de rolagem */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        ::-webkit-scrollbar-thumb {
            background: #a8a29e; /* stone-400 */
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #78716c; /* stone-500 */
        }
    </style>
</head>
<body class="bg-stone-100 text-stone-800">

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        
        <!-- Cabeçalho -->
        <header class="text-center mb-8">
            <h1 class="text-2xl md:text-3xl font-bold text-stone-800">Validação de colaboradores</h1>
            <p class="text-stone-500 mt-2">Selecione uma filial para visualizar os dados em tempo real</p>
        </header>

        <!-- Controles -->
        <div class="flex flex-col sm:flex-row justify-center items-center gap-4 mb-8">
            <div class="w-full sm:w-80">
                <label for="branch-select" class="sr-only">Selecionar Filial</label>
                <select id="branch-select" class="w-full p-3 border border-stone-300 rounded-lg shadow-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition">
                    <option value="">Carregando filiais...</option>
                </select>
            </div>
        </div>

        <!-- Bloco de Descrição / Instruções -->
        <div class="max-w-4xl mx-auto mb-8 p-6 bg-white border border-stone-200 rounded-lg shadow-sm text-stone-700">
            <h2 class="text-xl font-bold text-orange-700 mb-3">Atenção, Líder! Informação Importante sobre o Mérito</h2>
            <div class="space-y-3 text-base">
                <p>Para garantir um processo de indicação justo e preciso, é fundamental que a validação dos critérios de mérito seja feita com atenção.</p>
                <p>Ao selecionar a sua filial, você terá acesso imediato aos critérios de elegibilidade de cada colaborador. A indicação <strong>APTO</strong> significa que o colaborador atende ao requisito.</p>
                <p>Lembre-se: o colaborador deve estar <strong>APTO</strong> em <em>todos</em> os critérios para ser considerado.</p>
                <p>Para os colaboradores que cumprirem todos os requisitos, a <strong>avaliação final</strong> será a verificação do <strong>Plano de Desenvolvimento Individual (PDI)</strong>. Apenas aqueles que estiverem com o PDI em dia terão a indicação validada.</p>
                <p class="font-semibold mt-4">Sua atenção a esses detalhes é crucial para o sucesso da nossa iniciativa.</p>
            </div>
        </div>

        <!-- Feedback de Status -->
        <div id="status-feedback" class="text-center mb-4 h-6 text-stone-500"></div>

        <!-- Container da Lista de Colaboradores -->
        <main id="employee-list" class="flex flex-col gap-4">
            <!-- Itens da lista de colaboradores serão inseridos aqui -->
        </main>

    </div>

    <script>
        // NOTA IMPORTANTE:
        // Este script busca dados de uma URL externa (Google Sheets).
        // Por motivos de segurança (política de CORS), os navegadores modernos bloqueiam
        // esta ação quando o arquivo HTML é aberto diretamente do seu computador (ex: file:///C:/...).
        // Para que o script funcione corretamente, este arquivo HTML precisa ser
        // servido por um servidor web (ex: usando a extensão "Live Server" no VS Code,
        // ou hospedando o arquivo em um serviço online).

        // URL da planilha do Google Sheets publicada como CSV
        const sheetUrl = 'https://docs.google.com/spreadsheets/d/11mugZl4ro9mfM-B1zXGAU-wpfY9w2Pdg-lgyTQZtAW8/export?format=csv';

        const branchSelect = document.getElementById('branch-select');
        const employeeList = document.getElementById('employee-list');
        const statusFeedback = document.getElementById('status-feedback');

        let allData = []; // Armazena todos os dados da planilha para evitar múltiplas buscas

        // Função para converter texto CSV em um array de objetos
        function csvToArray(csv) {
            const rows = csv.trim().split('\n');
            if (rows.length < 2) return [];
            
            const headers = rows[0].split(',').map(header => header.trim());
            
            return rows.slice(1).map(row => {
                const values = row.split(',').map(value => value.trim());
                return headers.reduce((object, header, index) => {
                    object[header] = values[index];
                    return object;
                }, {});
            });
        }

        // Função para buscar e processar os dados
        async function fetchDataAndRender() {
            statusFeedback.textContent = 'Atualizando dados...';
            try {
                const response = await fetch(sheetUrl);
                if (!response.ok) {
                    throw new Error(`Erro de rede: ${response.statusText}`);
                }
                const csvText = await response.text();
                allData = csvToArray(csvText);

                const currentBranch = branchSelect.value;
                
                populateBranchFilter(allData);

                // Mantém a filial selecionada após a atualização
                if (currentBranch && Array.from(branchSelect.options).some(opt => opt.value === currentBranch)) {
                    branchSelect.value = currentBranch;
                }
                
                displayEmployees(branchSelect.value);
                
                const now = new Date();
                statusFeedback.textContent = `Dados atualizados às ${now.toLocaleTimeString()}`;

            } catch (error) {
                console.error('Falha ao buscar dados da planilha:', error);
                employeeList.innerHTML = `<div class="text-center p-8 bg-red-100 text-red-700 rounded-lg">
                                            <p class="font-bold">Erro ao carregar os dados.</p>
                                            <p>Verifique se a planilha está publicada corretamente e tente novamente.</p>
                                          </div>`;
                statusFeedback.textContent = 'Falha na atualização.';
            }
        }

        // Popula o seletor de filiais com opções únicas
        function populateBranchFilter(data) {
            const branches = [...new Set(data.map(item => item.FILIAL).filter(Boolean))];
            
            // Ordenação numérica customizada
            branches.sort((a, b) => {
                const numA = parseInt(a.replace(/\D/g, ''), 10);
                const numB = parseInt(b.replace(/\D/g, ''), 10);
                
                if (isNaN(numA) || isNaN(numB)) {
                    return a.localeCompare(b); // Fallback para nomes não numéricos
                }
                
                return numA - numB;
            });
            
            const existingOptions = Array.from(branchSelect.options).map(opt => opt.value);
            
            if (JSON.stringify(branches) !== JSON.stringify(existingOptions.slice(1))) {
                const firstOption = branchSelect.querySelector('option:first-child');
                firstOption.textContent = 'Selecione uma filial';
                branchSelect.innerHTML = '';
                branchSelect.appendChild(firstOption);

                branches.forEach(branch => {
                    const option = document.createElement('option');
                    option.value = branch;
                    option.textContent = branch;
                    branchSelect.appendChild(option);
                });
            }
        }

        // Função auxiliar para formatar as características individuais
        function formatCharacteristic(value) {
            const val = value || 'N/A';
            if (val.toUpperCase() === 'APTO') {
                return `<span class="text-green-700 font-medium">${val}</span>`;
            }
            if (val.toUpperCase() === 'INAPTO') {
                return `<span class="text-red-700 font-bold">${val}</span>`;
            }
            return val;
        }

        // Exibe os colaboradores da filial selecionada
        function displayEmployees(selectedBranch) {
            employeeList.innerHTML = ''; // Limpa a lista atual

            if (!selectedBranch) {
                employeeList.innerHTML = `<div class="text-center p-8 bg-orange-100 text-orange-700 rounded-lg">
                                            <p>Por favor, selecione uma filial no menu acima para começar.</p>
                                          </div>`;
                return;
            }

            const branchEmployees = allData.filter(emp => emp.FILIAL === selectedBranch);

            if (branchEmployees.length === 0) {
                employeeList.innerHTML = `<div class="text-center p-8 bg-yellow-100 text-yellow-700 rounded-lg">
                                            <p>Nenhum colaborador encontrado para esta filial.</p>
                                          </div>`;
                return;
            }
            
            const aptos = branchEmployees.filter(emp => emp.ELEGIVEL === 'APTO');
            const outros = branchEmployees.filter(emp => emp.ELEGIVEL !== 'APTO');
            const sortedEmployees = [...aptos, ...outros];

            sortedEmployees.forEach(emp => {
                const isApto = emp.ELEGIVEL === 'APTO';
                const isInapto = emp.ELEGIVEL === 'INAPTO';

                let borderColor = 'border-stone-300';
                let titleColor = 'text-stone-800';
                let statusTagHtml;

                if (isApto) {
                    borderColor = 'border-green-500';
                    titleColor = 'text-green-800';
                    statusTagHtml = `<span class="text-xs font-bold self-start sm:self-center uppercase px-3 py-1 bg-green-100 text-green-800 rounded-full">APTO</span>`;
                } else if (isInapto) {
                    borderColor = 'border-red-500';
                    titleColor = 'text-red-700';
                    statusTagHtml = `<span class="text-xs font-bold self-start sm:self-center uppercase px-3 py-1 bg-red-100 text-red-700 rounded-full">INAPTO</span>`;
                } else {
                    borderColor = 'border-stone-300';
                    titleColor = 'text-stone-800';
                    statusTagHtml = `<span class="text-xs font-bold self-start sm:self-center uppercase px-3 py-1 bg-stone-100 text-stone-600 rounded-full">${emp.ELEGIVEL || 'N/A'}</span>`;
                }

                const listItem = `
                    <div class="w-full bg-white rounded-lg shadow-sm border-l-4 ${borderColor} p-4 transition-shadow hover:shadow-md">
                        <div class="flex flex-col sm:flex-row justify-between sm:items-center gap-2 mb-3">
                            <div>
                                <h3 class="text-lg font-bold ${titleColor}">${emp.NOME || 'N/A'}</h3>
                                <p class="text-sm ${isInapto ? 'text-red-500' : 'text-gray-500'}">Matrícula: ${emp.MATRICULA || 'N/A'}</p>
                            </div>
                            ${statusTagHtml}
                        </div>
                        
                        <div class="border-t border-stone-200 pt-3 mt-3 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-x-4 gap-y-2 text-sm text-stone-600">
                            <div><strong class="font-semibold text-stone-700">Admissão:</strong> ${emp.ADMISSAO || 'N/A'}</div>
                            <div><strong class="font-semibold text-stone-700">Intermitente:</strong> ${formatCharacteristic(emp.INTERMITENTE)}</div>
                            <div><strong class="font-semibold text-stone-700">Integração:</strong> ${formatCharacteristic(emp.INTEGRACAO)}</div>
                            <div><strong class="font-semibold text-stone-700">Advertência:</strong> ${formatCharacteristic(emp.ADVERTENCIA)}</div>
                            <div><strong class="font-semibold text-stone-700">Unimartinello:</strong> ${formatCharacteristic(emp.UNIMARTINELLO)}</div>
                            <div><strong class="font-semibold text-stone-700">Faltas Injust.:</strong> ${formatCharacteristic(emp['FALTAS INJUST.'])}</div>
                            <div><strong class="font-semibold text-stone-700">Alt. Salarial:</strong> ${formatCharacteristic(emp['ALTERAÇÃO SALARIAL'])}</div>
                            <div><strong class="font-semibold text-stone-700">Aval. Desemp.:</strong> ${formatCharacteristic(emp['AVALIACAO DESEMP.'])}</div>
                        </div>
                    </div>
                `;
                employeeList.innerHTML += listItem;
            });
        }

        // Adiciona o evento de mudança ao seletor de filial
        branchSelect.addEventListener('change', () => {
            displayEmployees(branchSelect.value);
        });

        // Inicia o processo ao carregar a página e define a atualização automática
        document.addEventListener('DOMContentLoaded', () => {
            fetchDataAndRender(); // Carga inicial
            setInterval(fetchDataAndRender, 10000); // Atualiza a cada 10 segundos
        });
    </script>

</body>
</html>
